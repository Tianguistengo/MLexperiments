https://www.kaggle.com/yassineghouzam/introduction-to-cnn-keras-0-997-top-6

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import seaborn as sns
%matplotlib inline

np.random.seed(2)

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import itertools

from keras.utils.np_utils import to_categorical # convert to one-hot-encoding
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.optimizers import RMSprop
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ReduceLROnPlateau


sns.set(style='white', context='notebook', palette='deep')


---------------------------------------------

-The computer does not see the image, it sees an arry of numbers

- [red,green,blue] that's the order, so [0,1,0] it's only green.

-low numbers==darker, high numbers==brighter

"Neural networks expect the labels of classes in a dataset to be organized in a ONE-HOT ENCODER manner: 
each row in the array contains zeros in all columns, except the column corresponding to a unique label, which is set to 1.

-
# Reshape test data
test_data = test_data.reshape(10, 784)

# Evaluate the model
model.evaluate(test_data, test_labels)

-the KERNEL defines the feature that we are looking for
kernel=np.array([-1,1])

After the convolution is done (with a kernel that tells it what to look for),
the resulting array is called a ----- "FEATURE MAP"-----,
because it contains a map of the locations in the image that match the features represented by the kernel.

-The convolution of an image with a kernel 
summarizes a part of the image as the sum of the multiplication of that part of the image with the kernel.

-The output of each unit in this layer is a convolution of a kernel over the previous layer 
(if it's the first layer then its over the image input).

-A normal dense layer has one weight for each pixel in the image,
but a convolutional layer, has only one weight for each pixel IN THE KERNEL.

- the FLATTEN layer, acts as a connector between the convolution and dense layer.
The convolution layer hands the feature map and the flatten layer gives it to the dense layer(which acts as an output layer
with the softmax activation function).

-Convolutional networks for classification are constructed from a sequence of convolutional layers (for image processing) 
and fully connected (Dense) layers (for readout). 

"
-# Initialize the model object
model = Sequential()

# Add a convolutional layer
model.add(Conv2D(10, kernel_size=3, activation='relu', 
               input_shape=(img_rows,img_cols,1)))   ----> the one is for the channel( 1 in this case = B/W)
               
 # Compile the model 
model.compile(optimizer='adam', 
              loss='categorical_crossentropy', 
              metrics=['accuracy'])

# Fit the model on a training set
model.fit(train_data, train_labels, 
          validation_split=0.2, 
          epochs=3, batch_size=10)
          
 -
          




























