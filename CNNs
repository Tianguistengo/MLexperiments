https://www.kaggle.com/yassineghouzam/introduction-to-cnn-keras-0-997-top-6

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
import seaborn as sns
%matplotlib inline

np.random.seed(2)

from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
import itertools

from keras.utils.np_utils import to_categorical # convert to one-hot-encoding
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPool2D
from keras.optimizers import RMSprop
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import ReduceLROnPlateau


sns.set(style='white', context='notebook', palette='deep')


---------------------------------------------

-The computer does not see the image, it sees an arry of numbers

- [red,green,blue] that's the order, so [0,1,0] it's only green.

-low numbers==darker, high numbers==brighter

"Neural networks expect the labels of classes in a dataset to be organized in a ONE-HOT ENCODER manner: 
each row in the array contains zeros in all columns, except the column corresponding to a unique label, which is set to 1.

-
# Reshape test data
test_data = test_data.reshape(10, 784)

# Evaluate the model
model.evaluate(test_data, test_labels)

-the KERNEL defines the feature that we are looking for
kernel=np.array([-1,1])

After the convolution is done (with a kernel that tells it what to look for),
the resulting array is called a ----- "FEATURE MAP"-----,
because it contains a map of the locations in the image that match the features represented by the kernel.

-The convolution of an image with a kernel 
summarizes a part of the image as the sum of the multiplication of that part of the image with the kernel.











